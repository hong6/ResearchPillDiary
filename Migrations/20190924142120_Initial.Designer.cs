// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResearchPillDiary.Entities;

namespace ResearchPillDiary.Migrations
{
    [DbContext(typeof(PillsDiaryContext))]
    [Migration("20190924142120_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ResearchPillDiary.Entities.DiaryMedication", b =>
                {
                    b.Property<string>("DiaryMedicationId")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DiaryEntryDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<bool?>("DidTake");

                    b.Property<string>("PatientId")
                        .HasMaxLength(50);

                    b.HasKey("DiaryMedicationId");

                    b.HasIndex("PatientId");

                    b.ToTable("DiaryMedication");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.DiarySymptom", b =>
                {
                    b.Property<string>("DiarySymptomId")
                        .HasMaxLength(50);

                    b.Property<string>("Attachment")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DiaryEntryDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Note")
                        .HasMaxLength(100);

                    b.Property<string>("Pain")
                        .HasMaxLength(50);

                    b.Property<string>("PatientId")
                        .HasMaxLength(50);

                    b.HasKey("DiarySymptomId");

                    b.HasIndex("PatientId");

                    b.ToTable("DiarySymptom");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.DiaryVital", b =>
                {
                    b.Property<string>("DiaryVitalId")
                        .HasMaxLength(50);

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTemp")
                        .HasMaxLength(50);

                    b.Property<string>("BodyWeight")
                        .HasMaxLength(50);

                    b.Property<string>("PatientId")
                        .HasMaxLength(50);

                    b.HasKey("DiaryVitalId");

                    b.HasIndex("PatientId");

                    b.ToTable("DiaryVital");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.Medication", b =>
                {
                    b.Property<string>("MedicationId")
                        .HasMaxLength(50);

                    b.Property<string>("Frequency")
                        .HasMaxLength(50);

                    b.Property<string>("Instructions")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Purpose")
                        .HasMaxLength(50);

                    b.HasKey("MedicationId");

                    b.ToTable("Medication");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(50);

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.HasKey("PatientId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.PatientAppointment", b =>
                {
                    b.Property<string>("PatientAppointmentId")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("AppointmentDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("DoctorId")
                        .HasMaxLength(50);

                    b.Property<string>("LocationId")
                        .HasMaxLength(50);

                    b.Property<string>("PatientId")
                        .HasMaxLength(50);

                    b.Property<string>("TrialId")
                        .HasMaxLength(50);

                    b.HasKey("PatientAppointmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TrialId");

                    b.ToTable("PatientAppointment");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.PatientMedicationSchedule", b =>
                {
                    b.Property<string>("PatientMedicationScheduleId")
                        .HasMaxLength(50);

                    b.Property<string>("Active")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Day")
                        .HasColumnType("date");

                    b.Property<string>("Dosage")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Location")
                        .HasMaxLength(100);

                    b.Property<string>("MedicationId")
                        .HasMaxLength(50);

                    b.Property<string>("PatientId")
                        .HasMaxLength(50);

                    b.Property<string>("Pharmacy")
                        .HasMaxLength(100);

                    b.Property<string>("PrescribingDoctor")
                        .HasMaxLength(50);

                    b.Property<string>("Reminder")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("TrialId")
                        .HasMaxLength(50);

                    b.HasKey("PatientMedicationScheduleId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedicationSchedule");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.Trial", b =>
                {
                    b.Property<string>("TrialId")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("TrialName")
                        .HasMaxLength(50);

                    b.HasKey("TrialId");

                    b.ToTable("Trial");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.TrialMedication", b =>
                {
                    b.Property<string>("TrialMedicationId")
                        .HasMaxLength(50);

                    b.Property<string>("MedicationId")
                        .HasMaxLength(50);

                    b.Property<string>("Optional")
                        .HasMaxLength(50);

                    b.Property<string>("TrialId")
                        .HasMaxLength(50);

                    b.HasKey("TrialMedicationId");

                    b.HasIndex("TrialId");

                    b.ToTable("TrialMedication");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.DiaryMedication", b =>
                {
                    b.HasOne("ResearchPillDiary.Entities.Patient", "Patient")
                        .WithMany("DiaryMedication")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_DiaryMedication_Patient");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.DiarySymptom", b =>
                {
                    b.HasOne("ResearchPillDiary.Entities.Patient", "Patient")
                        .WithMany("DiarySymptom")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_DiarySymptom_Patient");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.DiaryVital", b =>
                {
                    b.HasOne("ResearchPillDiary.Entities.Patient", "Patient")
                        .WithMany("DiaryVital")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_DiaryVital_Patient");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.PatientAppointment", b =>
                {
                    b.HasOne("ResearchPillDiary.Entities.Patient", "Patient")
                        .WithMany("PatientAppointment")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientAppointment_Patient1");

                    b.HasOne("ResearchPillDiary.Entities.Trial", "Trial")
                        .WithMany("PatientAppointment")
                        .HasForeignKey("TrialId")
                        .HasConstraintName("FK_PatientAppointment_Patient");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.PatientMedicationSchedule", b =>
                {
                    b.HasOne("ResearchPillDiary.Entities.Medication", "Medication")
                        .WithMany("PatientMedicationSchedule")
                        .HasForeignKey("MedicationId")
                        .HasConstraintName("FK_PatientMedicationSchedule_Medication");

                    b.HasOne("ResearchPillDiary.Entities.Patient", "Patient")
                        .WithMany("PatientMedicationSchedule")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientMedicationSchedule_PatientMedicationSchedule");
                });

            modelBuilder.Entity("ResearchPillDiary.Entities.TrialMedication", b =>
                {
                    b.HasOne("ResearchPillDiary.Entities.Trial", "Trial")
                        .WithMany("TrialMedication")
                        .HasForeignKey("TrialId")
                        .HasConstraintName("FK_TrialMedication_Trial");
                });
#pragma warning restore 612, 618
        }
    }
}
